[
  {
    "objectID": "Lecture-7-Dataframes-in-R.html",
    "href": "Lecture-7-Dataframes-in-R.html",
    "title": "7  Dataframes in R",
    "section": "",
    "text": "7.1 Creating Dataframes\nWithin R, we can form structured data with multiple columns. These are called Dataframes and are comparable to the way a spreadsheet may look. Within each dataframe, multiple columns can be present, with each column being a vector. Additionally, the column types may vary, as we can have a numeric vector, a logical vector, and a character vector all in the same dataframe. It is important to talk about dataframes as this is the predominant data structure in R. Almost all of the datasets that we encounter will be formatted as a dataframe.\nWithin a dataframe, the rows will represent an observation. Additionally, each vector (column) will have the same length as all of the others, resulting in a “rectangular” looking dataframe. We can make one ourselves by specifying the vectors in the data.frame() function. An example of this can be seen below:\nx &lt;- 12:16\ny &lt;- 80:84\ndf &lt;- data.frame(x,y)\ndf\n\n   x  y\n1 12 80\n2 13 81\n3 14 82\n4 15 83\n5 16 84\nAnother example can be seen below. In creating this dataframe we will utilize our sample() function to randomly generate a vector of length 10. When you run the same code you might have different values generated since it does so randomly. To display it I will use the head() function will display just the first few observations:\nnames &lt;- sample(c(\"John\", \"Paul\", \"George\", \"Ringo\"), 10, replace=TRUE)\nages &lt;- sample(18:25, 10, replace=TRUE)\nmajor &lt;- sample(c(\"Undeclared\", \"Math\", \"Cyber\", \"Data\", \"Comp-Sci\"), 10, replace=TRUE)\ncommuter &lt;- sample(c(TRUE, FALSE), 10, replace=TRUE)\ndf &lt;- data.frame(names, ages, major, commuter)\nhead(df, 5) # Retrieves the first 5 rows (6 by default)\n\n  names ages major commuter\n1  John   25  Data     TRUE\n2 Ringo   20 Cyber    FALSE\n3  Paul   21 Cyber     TRUE\n4  John   18  Math    FALSE\n5 Ringo   21  Math     TRUE",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dataframes in R</span>"
    ]
  },
  {
    "objectID": "Lecture-7-Dataframes-in-R.html#creating-dataframes",
    "href": "Lecture-7-Dataframes-in-R.html#creating-dataframes",
    "title": "7  Dataframes in R",
    "section": "",
    "text": "Try it Out\n\n\n\nEmmit is organizing a small conference and wants to keep track of attendees. Make a dataframe which looks exactly like the following list:\n\n\n    name age      role registered\n1   Adam  30  attendee       TRUE\n2   Brad  49   speaker       TRUE\n3 Claire  32 organizer       TRUE\n4 Donald  28  attendee      FALSE\n5 Elaine  27  attendee      FALSE\n6  Fiona  33 organizer       TRUE\n\n\n\n\nClick to see the solution",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dataframes in R</span>"
    ]
  },
  {
    "objectID": "Lecture-7-Dataframes-in-R.html#the-structure-of-dataframes",
    "href": "Lecture-7-Dataframes-in-R.html#the-structure-of-dataframes",
    "title": "7  Dataframes in R",
    "section": "7.2 The Structure of Dataframes",
    "text": "7.2 The Structure of Dataframes\nOne nice thing about dataframes is that the individual columns will retain the same class type that the vector has. We can see the structure of the dataframe by passing the dataframe into the str() function.\n\nstr(df)\n\n'data.frame':   10 obs. of  4 variables:\n $ names   : chr  \"John\" \"Ringo\" \"Paul\" \"John\" ...\n $ ages    : int  25 20 21 18 21 24 24 20 23 24\n $ major   : chr  \"Data\" \"Cyber\" \"Cyber\" \"Math\" ...\n $ commuter: logi  TRUE FALSE TRUE FALSE TRUE TRUE ...\n\n\nWe can also bind vectors together using the cbind() function, but we should be weary about this as the vector types will be altered to the “lowest” type if they are different. The function name cbind() stands for column bind, which will attach a new column on the end of another vector/dataframe. An example of this can be seen below where all of the columns are turned into characters\n\ndf2 &lt;- data.frame(cbind(names, ages, major, commuter))\nhead(df2,5)\n\n  names ages major commuter\n1  John   25  Data     TRUE\n2 Ringo   20 Cyber    FALSE\n3  Paul   21 Cyber     TRUE\n4  John   18  Math    FALSE\n5 Ringo   21  Math     TRUE\n\nstr(df2)\n\n'data.frame':   10 obs. of  4 variables:\n $ names   : chr  \"John\" \"Ringo\" \"Paul\" \"John\" ...\n $ ages    : chr  \"25\" \"20\" \"21\" \"18\" ...\n $ major   : chr  \"Data\" \"Cyber\" \"Cyber\" \"Math\" ...\n $ commuter: chr  \"TRUE\" \"FALSE\" \"TRUE\" \"FALSE\" ...\n\n\nWe can also attach a new row on the end of a dataframe using the rbind() function. Once again though, we should be wary about this as we can potentially alter the column types.\n\ndata_to_be_added &lt;- c(\"Pete\", 24, \"Percussion\", FALSE)\ndf_added &lt;- rbind(df, data_to_be_added)\ntail(df_added, 5) # Retrieves the last 5 observations of the dataframe\n\n    names ages      major commuter\n7  George   24      Cyber    FALSE\n8    Paul   20      Cyber    FALSE\n9  George   23      Cyber     TRUE\n10   John   24       Math    FALSE\n11   Pete   24 Percussion    FALSE\n\n\n\n\n\n\n\n\nTry it Out\n\n\n\nUsing the dataframe you previously made for Emmit, add a new row to the list of attendees: Gracie who is 39, a speaker, and not registered.\n\n\nClick to see the solution",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dataframes in R</span>"
    ]
  },
  {
    "objectID": "Lecture-7-Dataframes-in-R.html#dataframe-properties",
    "href": "Lecture-7-Dataframes-in-R.html#dataframe-properties",
    "title": "7  Dataframes in R",
    "section": "7.3 Dataframe Properties",
    "text": "7.3 Dataframe Properties\nWe can learn about the dataframe’s properties using a few different functions. One function called dim() will tell us about the number of rows and columns in the dataset (the dimension). Meanwhile, nrow() will tell us the number of rows, and ncol() will tell us the number of columns in the dataframe.\n\ndim(df)\n\n[1] 10  4\n\nnrow(df)\n\n[1] 10\n\nncol(df)\n\n[1] 4\n\n\n\n\n\n\n\n\nTry it Out\n\n\n\nUsing the dataframe you previously made for Emmit with Gracie now added, determine the number of rows and columns the dataframe has.\n\n\nClick to see the solution",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dataframes in R</span>"
    ]
  },
  {
    "objectID": "Lecture-7-Dataframes-in-R.html#column-names-for-dataframes",
    "href": "Lecture-7-Dataframes-in-R.html#column-names-for-dataframes",
    "title": "7  Dataframes in R",
    "section": "7.4 Column names for Dataframes",
    "text": "7.4 Column names for Dataframes\nSometimes it is helpful to re-name the columns of a dataframe if we do not like the current names of the vector. We can do this when we create the dataframe like in the example below:\n\nx &lt;- 0:9\ny &lt;- 10:19\nz &lt;- 20:29\n\ndf3 &lt;- data.frame(\"singles\"=x, \"tens\"=y, \"twenties\"=z)\nhead(df3)\n\n  singles tens twenties\n1       0   10       20\n2       1   11       21\n3       2   12       22\n4       3   13       23\n5       4   14       24\n6       5   15       25\n\n\nIf we do not name them during the creation of the dataframe or we have a dataframe already in R and we want to rename the column names then we can do this using the colnames() function.\n\ndf3 &lt;- data.frame(x,y,z)\ncolnames(df3)\n\n[1] \"x\" \"y\" \"z\"\n\ncolnames(df3) &lt;- c(\"singles\", \"tens\", \"twenties\")\nhead(df3,4)\n\n  singles tens twenties\n1       0   10       20\n2       1   11       21\n3       2   12       22\n4       3   13       23\n\n\n\n\n\n\n\n\nTry it Out\n\n\n\nEmmit decides that the dataframe for the conference should have different header names. Alter the dataframe so the column names are now: “participant_name”, “participant_age”, “conference_role”, and “paid”.\n\n\nClick to see the solution",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dataframes in R</span>"
    ]
  },
  {
    "objectID": "Lecture-7-Dataframes-in-R.html#dataframe-index-selection",
    "href": "Lecture-7-Dataframes-in-R.html#dataframe-index-selection",
    "title": "7  Dataframes in R",
    "section": "7.5 Dataframe Index Selection",
    "text": "7.5 Dataframe Index Selection\nAccessing dataframe elements will be similar to accessing vector elements except now we are dealing with a 2-dimensional object in R. Thus, we will need to specify both dimensions (row and column). You will hear me say over and over again in class: “Dataframes index by Row comma Column”. Within our index selection brackets, we will need to have the comma present. If we put nothing before the comma it will indicate all rows, while nothing after the comma will indicate all columns.\nIf we would wish to display the element in the second row and first column we would make sure we call our dataframe and then in the index selection brackets we would say ‘[2,1]’. If we wanted to display the 3rd observation (3rd row) then we could just say ‘[3,]’ in our index-selection brackets. To display all of the elements in the 2nd column we would say ‘[,2]’ in our index-selection brackets. An example of this can be seen below:\n\nhead(df, 4)\n\n  names ages major commuter\n1  John   25  Data     TRUE\n2 Ringo   20 Cyber    FALSE\n3  Paul   21 Cyber     TRUE\n4  John   18  Math    FALSE\n\ndf[2,1] # Element in the 2nd row and 1st column\n\n[1] \"Ringo\"\n\ndf[3,] # Elements in the 3rd row\n\n  names ages major commuter\n3  Paul   21 Cyber     TRUE\n\ndf[,2] # Elements in the 2nd column\n\n [1] 25 20 21 18 21 24 24 20 23 24\n\n\nWe can also retrieve elements in a column by using a dollar sign ($) and then typing the column name. This resulting output will be a vector, not a dataframe, and will contain all of the values in that column.\n\ndf$names\n\n [1] \"John\"   \"Ringo\"  \"Paul\"   \"John\"   \"Ringo\"  \"George\" \"George\" \"Paul\"  \n [9] \"George\" \"John\"  \n\ndf$ages\n\n [1] 25 20 21 18 21 24 24 20 23 24\n\ndf$major\n\n [1] \"Data\"  \"Cyber\" \"Cyber\" \"Math\"  \"Math\"  \"Data\"  \"Cyber\" \"Cyber\" \"Cyber\"\n[10] \"Math\" \n\ndf$commuter\n\n [1]  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE\n\n\nWe can retrieve multiple rows and/or columns by passing a vector into our index-selection brackets. It should also be noted that we can select vector elements on a vector result. Additionally, we can pass a logical vector into the index-selection brackets to display values that meet certain criteria. Examples of these can be seen below:\n\ndf[3:5, c(1,3)] # Rows 3 through 5 and columns 1 and 3 \n\n  names major\n3  Paul Cyber\n4  John  Math\n5 Ringo  Math\n\ndf$ages\n\n [1] 25 20 21 18 21 24 24 20 23 24\n\ndf$ages[2:4]\n\n[1] 20 21 18\n\ndf$ages &lt;= 21\n\n [1] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE\n\ndf[df$ages &lt;= 21, ] # Displays just the TRUE rows\n\n  names ages major commuter\n2 Ringo   20 Cyber    FALSE\n3  Paul   21 Cyber     TRUE\n4  John   18  Math    FALSE\n5 Ringo   21  Math     TRUE\n8  Paul   20 Cyber    FALSE\n\n\n\n\n\n\n\n\nTry it Out\n\n\n\nEmmit would like to display some key information from the conference attendees. First he would like to display all of the people that are speaking, then he would like to display all of the people who are under the age of 35, and finally he would like to display all of the people who are either attendees and have paid the registration fee.\n\n\nClick to see the solution",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dataframes in R</span>"
    ]
  },
  {
    "objectID": "Lecture-7-Dataframes-in-R.html#editing-a-dataframe",
    "href": "Lecture-7-Dataframes-in-R.html#editing-a-dataframe",
    "title": "7  Dataframes in R",
    "section": "7.6 Editing a Dataframe",
    "text": "7.6 Editing a Dataframe\nFinally, we can remove a single row or column from our dataframe, but we want to be very careful of doing this as we might not be able to reverse the action. To remove a row or column we can simply overwrite our dataframe by stating our dataframe and then in our index-selection brackets indicate which row/column you want to remove with a negative sign. Both methods can be seen below:\n\ndf4 &lt;- df[-2,] # Everything but the second row\nhead(df4,3)\n\n  names ages major commuter\n1  John   25  Data     TRUE\n3  Paul   21 Cyber     TRUE\n4  John   18  Math    FALSE\n\ndf4 &lt;- df[,-3] # Everything but the third column\nhead(df4,3)\n\n  names ages commuter\n1  John   25     TRUE\n2 Ringo   20    FALSE\n3  Paul   21     TRUE\n\n\n\n\n\n\n\n\nTry it Out\n\n\n\nEmmit decides that he does not need to record the attendee’s age. He also found out that Adam is withdrawing from the conference. Help him remove the age column from the dataframe along with Adam’s information.\n\n\nClick to see the solution\n\n\n\n\n\n\n\nCreate a dataframe in R pertaining to cities in New York:\n\nA vector called cities with “Albany”, “Buffalo”, “Syracuse”, “Rochester”, “Ithaca” all included\n\nA vector called population with the values 97500, 255000, 142000, 210000, 32000\nA logical vector called capital with Albany set to True and the rest being False\nDisplay the structure of the dataframe.\nAdd a new column using cbind() called temperature with the values: 48,46,47,49,45.\nUse rbind() to add the row: “Binghamton”, 47000, FALSE, 44.\nExplain what happens to the column types after adding the row.\n\nCreate a dataframe in R pertaining to states on the East Coast:\n\nA vector containing the following states: “NY”, “MD”, “PA”, “NJ”, “VA”\nA vector containing the following median income values: 75000, 88000, 68000, 85000, 72000\nA logicial vector based on if it is a coastal state (only Pennsylvania is not on the coast)\nDisplay all of the coastal states\nDisplay all of the rows where the median income is greater than 80000\nDisplay all of the rows where the state ends in a vowel or has a median income less than 77000",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Dataframes in R</span>"
    ]
  },
  {
    "objectID": "Lecture-8-Exploratory-Data-Analysis.html",
    "href": "Lecture-8-Exploratory-Data-Analysis.html",
    "title": "8  Exploratory Data Analysis",
    "section": "",
    "text": "8.1 The Basics of EDA\nThe Data Science Life-cycle consists of procuring the data, tidying the data to make it workable, and then repeatedly transforming, visualizing, and modeling the data until our results are finalized to how we would like them. After we are happy with the results, we then have to communicate the information to our respective audience. For this class, we will focus on transforming the data, visualizing the data, and communicating the data. Future courses will emphasize “tidying” large datasets and building models to better describe data.\nWhenever we start working with a new dataset for the first time, we will want to carry out Exploratory Data Analysis (EDA) to understand what we are looking at. Some questions we may ask ourselves are: What does the data represent, What does the data look like, and Are there any problems (missing or unusual) with the data values? These questions will help us complete the first goal of EDA. We should note that these goals were designed/created by Professor Portier and they will not be found online or in other literature. The first goal, which will help us understand what our data is, can be seen below:",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "Lecture-8-Exploratory-Data-Analysis.html#the-basics-of-eda",
    "href": "Lecture-8-Exploratory-Data-Analysis.html#the-basics-of-eda",
    "title": "8  Exploratory Data Analysis",
    "section": "",
    "text": "Goal One: Getting to know the Data\n\nStep One: What is the data?\nStep Two: Logical vs Physical\nStep Three: Data Conditions\nStep Four: Data Preparation\nStep Five: Initial Summary\nStep Six: Data Visualization",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "Lecture-8-Exploratory-Data-Analysis.html#step-1-what-is-the-data",
    "href": "Lecture-8-Exploratory-Data-Analysis.html#step-1-what-is-the-data",
    "title": "8  Exploratory Data Analysis",
    "section": "8.2 Step 1: What is the Data?}",
    "text": "8.2 Step 1: What is the Data?}\nWe can attempt to answer Step One: What is the Data, by looking at the logical structure (metadata) of the data. Normally datasets come with documentation that tells us how the data was captured, what the attributes are that are being measured, and the data types and units present in the dataset. This will be helpful to look at as a first glance of the dataset to understand what we are working with. There are a few datasets that we will regularly use in R, one is the “datasets” library (built into R) and the other in the “openintro” library. To access a library for the first time we need to install the package using the install.packages() function. We will only need to do this once. After we have the package installed, we will need to use the library() function every time we start a new session (or RMarkdown file) to access the functions/datasets inside the package. To learn more about the packages we can use the help() function.\n\nhelp(package = \"datasets\") # Datasets built-in to R\ninstall.packages(\"openintro\") # Installing a package- only do this once\nlibrary(openintro) # Loading library into environment- do this every session\nhelp(package = \"openintro\") # Datasets in openintro library\n\n\n\n\n\n\n\nTry it Out\n\n\n\nEmmit is taking an Introductory Data Science course and has learned about a package created specifically for students in his course. Help Emmit install, load, and view the documentation for the “MSMU” package.\n\n\nClick to see the solution\n\nXXXX INSERT VIDEO XXXX",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "Lecture-8-Exploratory-Data-Analysis.html#step-2-logical-vs.-physical",
    "href": "Lecture-8-Exploratory-Data-Analysis.html#step-2-logical-vs.-physical",
    "title": "8  Exploratory Data Analysis",
    "section": "8.3 Step 2: Logical vs. Physical",
    "text": "8.3 Step 2: Logical vs. Physical\nIn Step Two: Logical vs Physical, we will want to make sure the documentation and the actual data match up. We will want to check that the number of variables and observations is the same in both places. To do this we can use the help() function to read the documentation and the str() function to look at the actual structure of the dataframe. Comparing both is an important step, especially when we start working with large “real-world” datasets. If the documentation and the data do not match up then we should be wary about working with the dataset as it might be missing vital information.\n\nhelp(mtcars) # Reading the documentation\nstr(mtcars) # Looking at the dataset structure\n\n\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\n\n\n\n\n\n\nTry it Out\n\n\n\nHelp Emmit look at the documentation for the “income_data” dataset in the “MSMU” library and verify that it matches the data avaliable in the package.\n\n\nClick to see the solution\n\nXXXX INSERT VIDEO XXXX",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "Lecture-8-Exploratory-Data-Analysis.html#special-values-in-r",
    "href": "Lecture-8-Exploratory-Data-Analysis.html#special-values-in-r",
    "title": "8  Exploratory Data Analysis",
    "section": "8.4 Special Values in R}",
    "text": "8.4 Special Values in R}\nAfter we have confirmed that the documentation and the data align with each other, we will want to investigate if there is anything unusual with the data. For instance, are there any missing or special values? A few special values that we might encounter are missing data (indicated as **NA), non-numeric data (indicated as NaN* which stands for Not a Number), and extreme values that are beyond the computer’s limits (indicated as \\(\\pm\\) Inf). Below we can see a few missing values when we look at the structure of the “airquality” dataset, as well as other ways in which we might encounter special values. Notice how in R the value \\(-42/0\\) is \\(-\\infty\\) but in math we would consider it Undefined.\n\nstr(airquality)\n\n'data.frame':   153 obs. of  6 variables:\n $ Ozone  : int  41 36 12 18 NA 28 23 19 8 NA ...\n $ Solar.R: int  190 118 149 313 NA NA 299 99 19 194 ...\n $ Wind   : num  7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...\n $ Temp   : int  67 72 74 62 56 66 65 59 61 69 ...\n $ Month  : int  5 5 5 5 5 5 5 5 5 5 ...\n $ Day    : int  1 2 3 4 5 6 7 8 9 10 ...\n\nc(2^8392, -42/0, 0/0)\n\n[1]  Inf -Inf  NaN",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "Lecture-8-Exploratory-Data-Analysis.html#step-3-data-conditions",
    "href": "Lecture-8-Exploratory-Data-Analysis.html#step-3-data-conditions",
    "title": "8  Exploratory Data Analysis",
    "section": "8.5 Step 3: Data Conditions",
    "text": "8.5 Step 3: Data Conditions\nFor large datasets, we will not want to scan the whole dataset to see if missing values are present though. Thankfully, we can determine if a dataset or specific column has missing values present by using the is.na() function. This will return a logical vector of TRUE and FALSE depending on if the individual elements are NA. We can then sum up the logical vector to determine how many missing values are present.\n\nsum(is.na(airquality$Ozone))\n\n[1] 37\n\nsum(is.na(airquality$Solar.R))\n\n[1] 7\n\nsum(is.na(airquality$Wind))\n\n[1] 0\n\n\nIf we want to investigate where the missing values occur we could use the which() function to identify the elements that are missing.\n\nhead(airquality$Ozone, 10)\n\n [1] 41 36 12 18 NA 28 23 19  8 NA\n\nis.na(head(airquality$Ozone, 10))\n\n [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE\n\nwhich(is.na(head(airquality$Ozone, 10)))\n\n[1]  5 10\n\n\n\n\n\n\n\n\nTry it Out\n\n\n\nLooking at the “income_data” dataset in the “MSMU” library, help Emmit determine if there are any missing values present and where they occur.\n\n\nClick to see the solution\n\nXXXX INSERT VIDEO XXXX\n\n\n\nIt may also be a good idea to print out the unique values to see if there are any missing or unusual values. To do this, we can use the unique() function as well as the sort() function. One other thing we might look for the an outlier value. For instance, 999 might indicate a missing value if all other values are around 20. Another thing we will note is that some functions will not work properly if missing values exist. If this is the case then we might need to specify the argument na.rm=TRUE to remove the missing values before running the function.\n\nsort(unique(airquality$Ozone), na.last=TRUE)\n\n [1]   1   4   6   7   8   9  10  11  12  13  14  16  18  19  20  21  22  23  24\n[20]  27  28  29  30  31  32  34  35  36  37  39  40  41  44  45  46  47  48  49\n[39]  50  52  59  61  63  64  65  66  71  73  76  77  78  79  80  82  84  85  89\n[58]  91  96  97 108 110 115 118 122 135 168  NA\n\nrange(airquality$Ozone)\n\n[1] NA NA\n\nrange(airquality$Ozone, na.rm=TRUE)\n\n[1]   1 168\n\nmean(airquality$Ozone)\n\n[1] NA\n\nmean(airquality$Ozone, na.rm=TRUE)\n\n[1] 42.12931\n\n\nWe can see how many complete observations we have using the complete.cases() function. This will return TRUE if all of the observations in a row are present and FALSE if a missing value is detected. This will be beneficial so we can see if all of the missing values are in a few observations or if they are spread throughout the dataset. In addition to this, we could calculate the number of complete rows as well as how many observations have missing values by using the sum() function. If we are interested in the proportion of observations that are complete then we can use the mean() function. This will calculate the mean of the TRUEs (1) and FALSEs (0) and return the proportion of TRUEs that we have.\n\nhead(airquality)\n\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n\nhead(complete.cases(airquality))\n\n[1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n\nsum(complete.cases(airquality))\n\n[1] 111\n\nnrow(airquality) - sum(complete.cases(airquality))\n\n[1] 42\n\nsum(!complete.cases(airquality))\n\n[1] 42\n\nmean(complete.cases(airquality))\n\n[1] 0.7254902\n\nsum(complete.cases(airquality)) / nrow(airquality)\n\n[1] 0.7254902\n\n\nFinally, the last thing we may want to do in this step is to display all of the complete cases so that no missing values are present. To do this, we can pass the logical vector into our index-selection brackets. In the example below, notice how the 5th and 6th observation containing NA are no longer present:\n\nhead(airquality[complete.cases(airquality),])\n\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n7    23     299  8.6   65     5   7\n8    19      99 13.8   59     5   8\n\n\n\n\n\n\n\n\nTry it Out\n\n\n\nEmmit thinks that there are might be some unusual values present in the “income_data” dataset. Help him determine which values are unusual. Also help him calculate the mean number of years until retirement.\n\n\nClick to see the solution\n\nXXXX INSERT VIDEO XXXX",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "Lecture-8-Exploratory-Data-Analysis.html#step-4-data-preparation",
    "href": "Lecture-8-Exploratory-Data-Analysis.html#step-4-data-preparation",
    "title": "8  Exploratory Data Analysis",
    "section": "8.6 Step 4: Data Preparation",
    "text": "8.6 Step 4: Data Preparation\nIn Step Four: Data Preparation, we will begin to alter the dataset to better represent certain columns. For instance, does one of our columns need to be changed from quantitative to categorical? We might also be interested in adding new columns based on the data or just generally cleaning it up to help us gain information from the dataset. One thing we might do is replace implicit missing value if, after talking to an expert they inform us the value is not correct or missing. For instance, if we talked to an expert and they said that the Ozone should not be 168 but should be a missing value instead then we can make that change.\n\nairquality$Ozone[airquality$Ozone == 168] &lt;- NA\nsort(unique(airquality$Ozone), na.last = TRUE)\n\n [1]   1   4   6   7   8   9  10  11  12  13  14  16  18  19  20  21  22  23  24\n[20]  27  28  29  30  31  32  34  35  36  37  39  40  41  44  45  46  47  48  49\n[39]  50  52  59  61  63  64  65  66  71  73  76  77  78  79  80  82  84  85  89\n[58]  91  96  97 108 110 115 118 122 135  NA\n\n\nWe will very rarely make changes to missing values in this course. Instead, we will most likely just filter them out from our calculations using the argument na.rm=TRUE. In Data 210 we will learn different options of how to replace them.\nIf we want to convert a variable to a different type then we can using the different data type’s function in R. Most of these will be of the form as.type() where “type” is replaced by the data type we are aiming for. So, if we want to convert a vector to numeric then we would use as.numeric(). If we wanted a character or logical vector instead we would say as.character() or as.logical(). For converting vector to a factor we could use factor().\nTo see an example of this we will look at the “beaver2” dataset, specifically at the “activ” variable. Looking at the documentation it seems “activ” is an indicator variable (either 0 or 1) which may be better suited to be a factor instead of an integer. So, we will go through the process of converting the vector into a factor. When we do this though, we do not want to change the column in R, rather we will create a new column to store the changed value. This way if we make a mistake the original data will still be present. So, to re-iterate… don’t overwrite your column!!! If we do happen to over-write a dataset in R then we can get the original dataset back by using the command data(“name of dataset”) and it will reload the original into your environment.\n\nstr(beaver2)\n\n'data.frame':   100 obs. of  4 variables:\n $ day  : num  307 307 307 307 307 307 307 307 307 307 ...\n $ time : num  930 940 950 1000 1010 1020 1030 1040 1050 1100 ...\n $ temp : num  36.6 36.7 36.9 37.1 37.2 ...\n $ activ: num  0 0 0 0 0 0 0 0 0 0 ...\n\nunique(beaver2$activ)\n\n[1] 0 1\n\nbeaver2$activ_f &lt;- factor(beaver2$activ)\nlevels(beaver2$activ_f) &lt;- c(\"No\", \"Yes\")\nstr(beaver2)\n\n'data.frame':   100 obs. of  5 variables:\n $ day    : num  307 307 307 307 307 307 307 307 307 307 ...\n $ time   : num  930 940 950 1000 1010 1020 1030 1040 1050 1100 ...\n $ temp   : num  36.6 36.7 36.9 37.1 37.2 ...\n $ activ  : num  0 0 0 0 0 0 0 0 0 0 ...\n $ activ_f: Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 1 1 1 ...\n\n\n\n\n\n\n\n\nTry it Out\n\n\n\nYou and Emmit noticed that unusual values were present in the “Ages” and the “Salary” column. Change the unusual values to NA so that they are properly coded.\n\n\nClick to see the solution\n\nXXXX INSERT VIDEO XXXX\n\n\n\nSometimes it is helpful to convert a quantitative variable into a categorical variable by placing the data into different categories. To do this, we will “cut” the data into ranges and assign each value a category. An example of this can be seen below using the cut() function.\n\nrange(airquality$Ozone, na.rm=TRUE)\n\n[1]   1 135\n\ncut(airquality$Ozone, breaks=seq(0,150,by=25))\n\n  [1] (25,50]   (25,50]   (0,25]    (0,25]    &lt;NA&gt;      (25,50]   (0,25]   \n  [8] (0,25]    (0,25]    &lt;NA&gt;      (0,25]    (0,25]    (0,25]    (0,25]   \n [15] (0,25]    (0,25]    (25,50]   (0,25]    (25,50]   (0,25]    (0,25]   \n [22] (0,25]    (0,25]    (25,50]   &lt;NA&gt;      &lt;NA&gt;      &lt;NA&gt;      (0,25]   \n [29] (25,50]   (100,125] (25,50]   &lt;NA&gt;      &lt;NA&gt;      &lt;NA&gt;      &lt;NA&gt;     \n [36] &lt;NA&gt;      &lt;NA&gt;      (25,50]   &lt;NA&gt;      (50,75]   (25,50]   &lt;NA&gt;     \n [43] &lt;NA&gt;      (0,25]    &lt;NA&gt;      &lt;NA&gt;      (0,25]    (25,50]   (0,25]   \n [50] (0,25]    (0,25]    &lt;NA&gt;      &lt;NA&gt;      &lt;NA&gt;      &lt;NA&gt;      &lt;NA&gt;     \n [57] &lt;NA&gt;      &lt;NA&gt;      &lt;NA&gt;      &lt;NA&gt;      &lt;NA&gt;      (125,150] (25,50]  \n [64] (25,50]   &lt;NA&gt;      (50,75]   (25,50]   (75,100]  (75,100]  (75,100] \n [71] (75,100]  &lt;NA&gt;      (0,25]    (25,50]   &lt;NA&gt;      (0,25]    (25,50]  \n [78] (25,50]   (50,75]   (75,100]  (50,75]   (0,25]    &lt;NA&gt;      &lt;NA&gt;     \n [85] (75,100]  (100,125] (0,25]    (50,75]   (75,100]  (25,50]   (50,75]  \n [92] (50,75]   (25,50]   (0,25]    (0,25]    (75,100]  (25,50]   (50,75]  \n [99] (100,125] (75,100]  (100,125] &lt;NA&gt;      &lt;NA&gt;      (25,50]   (25,50]  \n[106] (50,75]   &lt;NA&gt;      (0,25]    (50,75]   (0,25]    (25,50]   (25,50]  \n[113] (0,25]    (0,25]    &lt;NA&gt;      (25,50]   &lt;NA&gt;      (50,75]   &lt;NA&gt;     \n[120] (75,100]  (100,125] (75,100]  (75,100]  (75,100]  (75,100]  (50,75]  \n[127] (75,100]  (25,50]   (25,50]   (0,25]    (0,25]    (0,25]    (0,25]   \n[134] (25,50]   (0,25]    (25,50]   (0,25]    (0,25]    (25,50]   (0,25]   \n[141] (0,25]    (0,25]    (0,25]    (0,25]    (0,25]    (25,50]   (0,25]   \n[148] (0,25]    (25,50]   &lt;NA&gt;      (0,25]    (0,25]    (0,25]   \nLevels: (0,25] (25,50] (50,75] (75,100] (100,125] (125,150]\n\nairquality$Ozone_cat &lt;- cut(airquality$Ozone, breaks=seq(0,150,by=25))\nsummary(airquality[,c(1,7)])\n\n     Ozone            Ozone_cat \n Min.   :  1.00   (0,25]   :50  \n 1st Qu.: 18.00   (25,50]  :32  \n Median : 31.00   (50,75]  :12  \n Mean   : 41.03   (75,100] :15  \n 3rd Qu.: 62.00   (100,125]: 5  \n Max.   :135.00   (125,150]: 1  \n NA's   :38       NA's     :38  \n\n\n\n\n\n\n\n\nTry it Out\n\n\n\nWhile the “Age” variable is beneficial, Emmit thinks that having a qualitative variable might be more beneficial. Help him add a new column to the dataframe which classifies an individual as early career (&lt; 35 years old), mid-career (35-55 years old), and late career (&gt; 55 years old).\n\n\nClick to see the solution\n\nXXXX INSERT VIDEO XXXX",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "Lecture-8-Exploratory-Data-Analysis.html#step-5-initial-summary",
    "href": "Lecture-8-Exploratory-Data-Analysis.html#step-5-initial-summary",
    "title": "8  Exploratory Data Analysis",
    "section": "8.7 Step 5: Initial Summary",
    "text": "8.7 Step 5: Initial Summary\nStep Five: Initial Summary is all about displaying a summary of the dataset to get some insight into how the data is spread out and where the center of each variable is. We will want to look at the results and ask ourselves what information we can gain from it. To procure a summary of a dataset, simply use the summary() function. The output will be a 5-number summary (with the mean included) along with how many missing values are in each variable.\n\nsummary(airquality)\n\n     Ozone           Solar.R           Wind             Temp      \n Min.   :  1.00   Min.   :  7.0   Min.   : 1.700   Min.   :56.00  \n 1st Qu.: 18.00   1st Qu.:115.8   1st Qu.: 7.400   1st Qu.:72.00  \n Median : 31.00   Median :205.0   Median : 9.700   Median :79.00  \n Mean   : 41.03   Mean   :185.9   Mean   : 9.958   Mean   :77.88  \n 3rd Qu.: 62.00   3rd Qu.:258.8   3rd Qu.:11.500   3rd Qu.:85.00  \n Max.   :135.00   Max.   :334.0   Max.   :20.700   Max.   :97.00  \n NA's   :38       NA's   :7                                       \n     Month            Day           Ozone_cat \n Min.   :5.000   Min.   : 1.0   (0,25]   :50  \n 1st Qu.:6.000   1st Qu.: 8.0   (25,50]  :32  \n Median :7.000   Median :16.0   (50,75]  :12  \n Mean   :6.993   Mean   :15.8   (75,100] :15  \n 3rd Qu.:8.000   3rd Qu.:23.0   (100,125]: 5  \n Max.   :9.000   Max.   :31.0   (125,150]: 1  \n                                NA's     :38",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "Lecture-8-Exploratory-Data-Analysis.html#step-6-data-visualization",
    "href": "Lecture-8-Exploratory-Data-Analysis.html#step-6-data-visualization",
    "title": "8  Exploratory Data Analysis",
    "section": "8.8 Step 6: Data Visualization",
    "text": "8.8 Step 6: Data Visualization\nAnd finally, the last step we want to do is Step Six: Data Visualizations. In this step, we want to visualize the quantitative data with a histogram using the hist() function and visualize the categorical data with barplots using the barplot() function. For categorical data, we will need to use the table() function to summarize the data first. And as we move throughout the course, we will introduce different visualization techniques which will help us understand the data.\n\nhist(airquality$Ozone, freq = FALSE)\nlines(density(airquality$Ozone, na.rm=TRUE))\n\n\n\n\n\n\n\n\n\ntable(airquality$Ozone_cat)\n\n\n   (0,25]   (25,50]   (50,75]  (75,100] (100,125] (125,150] \n       50        32        12        15         5         1 \n\nbarplot(table(airquality$Ozone_cat))\n\n\n\n\n\n\n\n\nExploratory Data Analysis, and in particular these 6 steps, is something we should carry out every time we start working with new datasets. We do not want to jump into analyzing a dataset without knowing what it looks like or if changes need to be made. After a while, these steps will become second nature to us and we will be able to carry them out relatively quickly.\n\n\n\n\n\n\nTry it Out\n\n\n\nHelp Emmit create a few different visualizations to understand the dataset.\n\n\nClick to see the solution\n\nXXXX INSERT VIDEO XXXX\n\n\n\n\n\nCarry out Exploratory Data Analysis on the “beaver2” dataset:\n\nDisplay the structure of the dataset. What are the datatypes present?\nCreate a new factor variable activ_f from the activ column with levels “No” and “Yes”. Confirm the new variable is a factor.\nWhy might converting activ to a factor be useful in data analysis?\nDisplay a summary of the beaver2 dataset including the new factor variable.\nSuppose you mistakenly overwrite the activ variable. How can you reload the original dataset to recover it?\n\nCarry out Exploratory Data Analysis on the “exam_data” dataset in the “MSMU” library:\n\nUse the help() function to explore the documentation for the built-in exam_data dataset. What does this dataset represent?\nUse str() on the exam_data dataset. How many rows and columns are there? Are there any special values or missing values mentioned?\nIdentify how many missing values are in each column\nDisplay the unique values of the writing.score column sorted in increasing order. What does the range look like including and excluding missing values?\nExplain why it might be important to know how many complete observations exist in this dataset. Use a function to find how many complete rows there are.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  }
]