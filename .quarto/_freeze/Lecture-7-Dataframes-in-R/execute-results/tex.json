{
  "hash": "54e18f63ccecfc97d446ce641660d75d",
  "result": {
    "engine": "knitr",
    "markdown": "# Dataframes in R\n\nWithin R, we can form structured data with multiple columns. These are called **Dataframes** and are comparable to the way a spreadsheet may look. Within each dataframe, multiple columns can be present, with each column being a vector. Additionally, the column types may vary, as we can have a numeric vector, a logical vector, and a character vector all in the same dataframe. It is important to talk about dataframes as this is the predominant data structure in R. Almost all of the datasets that we encounter will be formatted as a dataframe. \n\n## Creating Dataframes\n\nWithin a dataframe, the rows will represent an **observation**. Additionally, each vector (column) will have the same length as all of the others, resulting in a \"rectangular\" looking dataframe. We can make one ourselves by specifying the vectors in the *data.frame()* function. An example of this can be seen below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 12:16\ny <- 80:84\ndf <- data.frame(x,y)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   x  y\n1 12 80\n2 13 81\n3 14 82\n4 15 83\n5 16 84\n```\n\n\n:::\n:::\n\n\nAnother example can be seen below. In creating this dataframe we will utilize our *sample()* function to randomly generate a vector of length 10. When you run the same code you might have different values generated since it does so randomly. To display it I will use the *head()* function will display just the first few observations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames <- sample(c(\"John\", \"Paul\", \"George\", \"Ringo\"), 10, replace=TRUE)\nages <- sample(18:25, 10, replace=TRUE)\nmajor <- sample(c(\"Undeclared\", \"Math\", \"Cyber\", \"Data\", \"Comp-Sci\"), 10, replace=TRUE)\ncommuter <- sample(c(TRUE, FALSE), 10, replace=TRUE)\ndf <- data.frame(names, ages, major, commuter)\nhead(df, 5) # Retrieves the first 5 rows (6 by default)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   names ages      major commuter\n1   John   23 Undeclared     TRUE\n2 George   18      Cyber     TRUE\n3  Ringo   22       Math    FALSE\n4 George   20 Undeclared     TRUE\n5   John   20       Data    FALSE\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/KjMZt7-YDVQ}{Creating Dataframes in R}\n\\end{watch}\n\n## The Structure of Dataframes\n\nOne nice thing about dataframes is that the individual columns will retain the same class type that the vector has. We can see the structure of the dataframe by passing the dataframe into the *str()* function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t10 obs. of  4 variables:\n $ names   : chr  \"John\" \"George\" \"Ringo\" \"George\" ...\n $ ages    : int  23 18 22 20 20 19 25 18 24 18\n $ major   : chr  \"Undeclared\" \"Cyber\" \"Math\" \"Undeclared\" ...\n $ commuter: logi  TRUE TRUE FALSE TRUE FALSE TRUE ...\n```\n\n\n:::\n:::\n\n\nWe can also bind vectors together using the *cbind()* function, but we should be weary about this as the vector types will be altered to the \"lowest\" type if they are different. The function name *cbind()* stands for column bind, which will attach a new column on the end of another vector/dataframe. An example of this can be seen below where all of the columns are turned into characters\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- data.frame(cbind(names, ages, major, commuter))\nhead(df2,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   names ages      major commuter\n1   John   23 Undeclared     TRUE\n2 George   18      Cyber     TRUE\n3  Ringo   22       Math    FALSE\n4 George   20 Undeclared     TRUE\n5   John   20       Data    FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t10 obs. of  4 variables:\n $ names   : chr  \"John\" \"George\" \"Ringo\" \"George\" ...\n $ ages    : chr  \"23\" \"18\" \"22\" \"20\" ...\n $ major   : chr  \"Undeclared\" \"Cyber\" \"Math\" \"Undeclared\" ...\n $ commuter: chr  \"TRUE\" \"TRUE\" \"FALSE\" \"TRUE\" ...\n```\n\n\n:::\n:::\n\n\nWe can also attach a new row on the end of a dataframe using the *rbind()* function. Once again though, we should be wary about this as we can potentially alter the column types. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_to_be_added <- c(\"Pete\", 24, \"Percussion\", FALSE)\ndf_added <- rbind(df, data_to_be_added)\ntail(df_added, 5) # Retrieves the last 5 observations of the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    names ages      major commuter\n7    Paul   25 Undeclared     TRUE\n8    Paul   18   Comp-Sci    FALSE\n9  George   24       Data     TRUE\n10   John   18   Comp-Sci     TRUE\n11   Pete   24 Percussion    FALSE\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/0BlLEFou1kM}{The Structure of Dataframes}\n\\end{watch}\n\n## Dataframe Properties\n\nWe can learn about the dataframe's properties using a few different functions. One function called *dim()* will tell us about the number of rows and columns in the dataset (the dimension). Meanwhile, *nrow()* will tell us the number of rows, and *ncol()* will tell us the number of columns in the dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  4\n```\n\n\n:::\n\n```{.r .cell-code}\nnrow(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/fYxmRUeK4qw}{Dataframe Properties}\n\\end{watch}\n\n## Column names for Dataframes\n\nSometimes it is helpful to name the columns of a dataframe if we do not like the current names of the vector. We can do this when we create the dataframe like in the example below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0:9\ny <- 10:19\nz <- 20:29\n\ndf3 <- data.frame(\"singles\"=x, \"tens\"=y, \"twenties\"=z)\nhead(df3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  singles tens twenties\n1       0   10       20\n2       1   11       21\n3       2   12       22\n4       3   13       23\n5       4   14       24\n6       5   15       25\n```\n\n\n:::\n:::\n\n\n\nIf we do not name them during the creation of the dataframe or we have a dataframe already in R and we want to rename the column names then we can do this using the *colnames()* function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3 <- data.frame(x,y,z)\ncolnames(df3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"x\" \"y\" \"z\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(df3) <- c(\"singles\", \"tens\", \"twenties\")\nhead(df3,4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  singles tens twenties\n1       0   10       20\n2       1   11       21\n3       2   12       22\n4       3   13       23\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/jzJfkWANAMU}{Column Names for Dataframes}\n\\end{watch}\n\n## Dataframe Index Selection\n\nAccessing dataframe elements will be similar to accessing vector elements except now we are dealing with a 2-dimensional object in R. Thus, we will need to specify both dimensions (row and column). You will hear me say over and over again in class: \"Dataframes index by Row comma Column\". Within our index selection brackets, we will need to have the comma present. If we put nothing before the comma it will indicate all rows, while nothing after the comma will indicate all columns. \n\nIf we would wish to display the element in the second row and first column we would make sure we call our dataframe and then in the index selection brackets we would say '[2,1]'. If we wanted to display the 3rd observation (3rd row) then we could just say '[3,]' in our index-selection brackets. To display all of the elements in the 2nd column we would say '[,2]' in our index-selection brackets. An example of this can be seen below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   names ages      major commuter\n1   John   23 Undeclared     TRUE\n2 George   18      Cyber     TRUE\n3  Ringo   22       Math    FALSE\n4 George   20 Undeclared     TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ndf[2,1] # Element in the 2nd row and 1st column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"George\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndf[3,] # Elements in the 3rd row\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  names ages major commuter\n3 Ringo   22  Math    FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ndf[,2] # Elements in the 2nd column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 23 18 22 20 20 19 25 18 24 18\n```\n\n\n:::\n:::\n\n\nWe can also retrieve elements in a column by using a dollar sign ($) and then typing the column name. This resulting output will be a vector, not a dataframe, and will contain all of the values in that column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"John\"   \"George\" \"Ringo\"  \"George\" \"John\"   \"George\" \"Paul\"   \"Paul\"  \n [9] \"George\" \"John\"  \n```\n\n\n:::\n\n```{.r .cell-code}\ndf$ages\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 23 18 22 20 20 19 25 18 24 18\n```\n\n\n:::\n\n```{.r .cell-code}\ndf$major\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Undeclared\" \"Cyber\"      \"Math\"       \"Undeclared\" \"Data\"      \n [6] \"Undeclared\" \"Undeclared\" \"Comp-Sci\"   \"Data\"       \"Comp-Sci\"  \n```\n\n\n:::\n\n```{.r .cell-code}\ndf$commuter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  TRUE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/Sgaa-F_HEYo}{Dataframe Index Selection}\n\\end{watch}\n\nWe can retrieve multiple rows and/or columns by passing a vector into our index-selection brackets. It should also be noted that we can select vector elements on a vector result. Additionally, we can pass a logical vector into the index-selection brackets to display values that meet certain criteria. Examples of these can be seen below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[3:5, c(1,3)] # Rows 3 through 5 and columns 1 and 3 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   names      major\n3  Ringo       Math\n4 George Undeclared\n5   John       Data\n```\n\n\n:::\n\n```{.r .cell-code}\ndf$ages\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 23 18 22 20 20 19 25 18 24 18\n```\n\n\n:::\n\n```{.r .cell-code}\ndf$ages[2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18 22 20\n```\n\n\n:::\n\n```{.r .cell-code}\ndf$ages <= 21\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ndf[df$ages <= 21, ] # Displays just the TRUE rows\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    names ages      major commuter\n2  George   18      Cyber     TRUE\n4  George   20 Undeclared     TRUE\n5    John   20       Data    FALSE\n6  George   19 Undeclared     TRUE\n8    Paul   18   Comp-Sci    FALSE\n10   John   18   Comp-Sci     TRUE\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/hksRGX-YT6w}{Dataframe Index Selection using Logical Vectors}\n\\end{watch}\n\n## Editing a Dataframe\n\nFinally, we can remove a single row or column from our dataframe, but we want to be very careful of doing this as we might not be able to reverse the action. To remove a row or column we can simply overwrite our dataframe by stating our dataframe and then in our index-selection brackets indicate which row/column you want to remove with a negative sign. Both methods can be seen below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf4 <- df[-2,] # Everything but the second row\nhead(df4,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   names ages      major commuter\n1   John   23 Undeclared     TRUE\n3  Ringo   22       Math    FALSE\n4 George   20 Undeclared     TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\ndf4 <- df[,-3] # Everything but the third column\nhead(df4,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   names ages commuter\n1   John   23     TRUE\n2 George   18     TRUE\n3  Ringo   22    FALSE\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/us5M1ekgwUE}{Editing a Dataframe}\n\\end{watch}",
    "supporting": [
      "Lecture-7-Dataframes-in-R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}