{
  "hash": "963a32f897b1b80e425b9bfcf032f73d",
  "result": {
    "engine": "knitr",
    "markdown": "# More R\n\nSo far we have seen the basics of R, including ways to use R as a calculator as well as how to create variables and vectors. As a quick reminder, we can create a vector containing multiple elements by using our *c()* function (which stands for combine). After creating a vector we could then save it to a variable name by having the value point towards the name of our variable. To do this, we will use the assignment operator which looks like this: $<$--. An example of this can be seen below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1,2,3,4,5) # Combining multiple elements into a single vector \nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nc(\"Hello\", \"world!\") -> y # This also works but is not recommended\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello\"  \"world!\"\n```\n\n\n:::\n:::\n\n\n## Creating a Sequence of Numbers\n\nThere are additional ways we could make a vector as well. If we wanted all of our numbers in a sequence then we could use the *seq()* function to do this. With this function, we can specify what our starting value is and what we want the sequence to do. The function also allows us to pass an argument into it which specifies what value we should increment the sequence by. If we do not specify what we should increment by then it will automatically default to 1. We can also count down if we would like. Finally, it should be mentioned that most functions do not require us to write the argument name as long as we pass them in the correct order (but we should probably keep doing it).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from=1, to=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(from=1, to=10, by=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(7, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 6 5 4 3 2 1\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(from=30, to=1, by=-4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30 26 22 18 14 10  6  2\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(-1,2,by=0.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -1.0 -0.7 -0.4 -0.1  0.2  0.5  0.8  1.1  1.4  1.7  2.0\n```\n\n\n:::\n:::\n\n\nIf we do not need to increment the sequence by a certain value then we could do something similar with a colon. This will create a sequence by just adding 1 to a value until it reaches the end number. An example of this can be seen below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\n7:-2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  7  6  5  4  3  2  1  0 -1 -2\n```\n\n\n:::\n\n```{.r .cell-code}\n0.25:7.75 # Notice how it does not go past the ending value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.25 1.25 2.25 3.25 4.25 5.25 6.25 7.25\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/c4qJ3Y5hJ0s}{Creating a Sequence of Numbers}\n\\end{watch}\n\n## Replicating Values\n\nWe can replicate values (of any type) using the *rep()* function. This will allow us to pass a vector into the function and have it be replicated a certain number of times (and the number of times could also be a vector!). If we pass a vector in for the number of times then it will match it element by element and replicate it the specified number of times before going on to the next element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(2, times=6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 2 2 2 2 2\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(\"abc\", times=3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"abc\" \"abc\" \"abc\"\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(1:4, times=4:1) # 1st element 4 times, 2nd element 3 times, etc.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 2 2 2 3 3 4\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(c(7,2,1), times=c(1,4,8))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 7 2 2 2 2 1 1 1 1 1 1 1 1\n```\n\n\n:::\n:::\n\n\nThe function allows for other arguments as well, such as the length of the outputted sequence and if all of the elements should be replicated a certain amount of times. The 'each' argument will replicate each element a certain number of times while the 'length.out' argument will keep repeating a sequence until it is of a certain length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(c(7,2,1), times=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 2 1 7 2 1\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(c(7,2,1), each=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 7 2 2 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(c(7,2,1), length.out = 8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 2 1 7 2 1 7 2\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(c(7,2,1), each=3, length.out=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 7 7 7 2 2 2 1 1 1 7\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/OGBhjbDChgQ}{Replicating Values}\n\\end{watch}\n\n## Creating a Vector of Letters\n\nAs a quick reminder (since it is very important), R starts indexing at 1. This means that the first element in a vector is in the '1' index. Other languages, like Python, start counting at 0 but we will start counting at 1 in R. In R there is a vector called 'letters' that contains all of the lower-case letters. If we want to find out what the 4th letter is then we can use our \"index-selection\" brackets. We can also pass a vector into the index selection brackets as well, which includes sequences and replicated vectors (as long as they are numeric). There is also a vector in R called `LETTERS' which acts the same way but contains all capitalized letters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- letters # Saving the vector to 'x' for simplicity\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx[c(13, 15, 21, 14, 20)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"m\" \"o\" \"u\" \"n\" \"t\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx[17:22]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"q\" \"r\" \"s\" \"t\" \"u\" \"v\"\n```\n\n\n:::\n\n```{.r .cell-code}\nLETTERS[c(8, 5, 12, 12, 15)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"H\" \"E\" \"L\" \"L\" \"O\"\n```\n\n\n:::\n:::\n\n\nIf we ever wish to have all of the values displayed **except for** certain ones then we can put a negative in front of the value/vector and it will display everything except those values. This is helpful when it is easier to exclude certain indices instead of having to specify all of the desired indices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[seq(1,26,by=2)] # Every other letter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"c\" \"e\" \"g\" \"i\" \"k\" \"m\" \"o\" \"q\" \"s\" \"u\" \"w\" \"y\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx[-seq(1,26,by=2)] # Everything but these indices\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"b\" \"d\" \"f\" \"h\" \"j\" \"l\" \"n\" \"p\" \"r\" \"t\" \"v\" \"x\" \"z\"\n```\n\n\n:::\n\n```{.r .cell-code}\ny <- 1:10\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\ny[c(1,5,8)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 5 8\n```\n\n\n:::\n\n```{.r .cell-code}\ny[-c(1,5,8)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  3  4  6  7  9 10\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/H-q_LZVM0_0}{Using the Letters Vector}\n\\end{watch}\n\n## Named Vectors\n\nSince we have been discussing vectors and their elements, we should go ahead and mention that we can name the individual elements as well (this might make it easier for us to refer back to a specific element as we might not remember which index it is). There are a few different ways we can do this, the first is by naming them when we create the vector itself. To do this we will just put the name of the element to the left of the element with an equals sign in between. It may look something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(M=\"Monday\", W=\"Wednesday\", F=\"Friday\")\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          M           W           F \n   \"Monday\" \"Wednesday\"    \"Friday\" \n```\n\n\n:::\n\n```{.r .cell-code}\nnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"M\" \"W\" \"F\"\n```\n\n\n:::\n:::\n\n\nAnother way that might be beneficial is to name them after the vector has been created using the *names()* function. We will reference the names function with the vector inside and we will assign a character vector to it. This will update the names of the vector elements as whatever we passed into it. An example of this can also be seen below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"Monday\", \"Wednesday\", \"Friday\")\nnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(x) <- c(\"M\", \"W\", \"F\")\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          M           W           F \n   \"Monday\" \"Wednesday\"    \"Friday\" \n```\n\n\n:::\n\n```{.r .cell-code}\nnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"M\" \"W\" \"F\"\n```\n\n\n:::\n:::\n\n\nBecause the elements are named, we can pass the names into our index-selection brackets and R will output the element associated with that particular name. We will also still be able to access them with the index value as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[\"M\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       M \n\"Monday\" \n```\n\n\n:::\n\n```{.r .cell-code}\nx[c(\"M\", \"F\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       M        F \n\"Monday\" \"Friday\" \n```\n\n\n:::\n\n```{.r .cell-code}\nx[c(1,3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       M        F \n\"Monday\" \"Friday\" \n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/uYHuPb60zSA}{Named Vectors}\n\\end{watch}\n\n## Index Selection using GREP\n\nOne very powerful tool in R that allows us to search a string for a specific pattern is the *grep()* function. This stands for Global/Regular Expression/Print and is important to us as it will allow us to identify all of the elements containing a specific pattern. To see this function in action we will utilize the \"euro\" vector which is a named vector available to us in R. \n\n\n::: {.cell}\n\n```{.r .cell-code}\neuro\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        ATS         BEF         DEM         ESP         FIM         FRF \n  13.760300   40.339900    1.955830  166.386000    5.945730    6.559570 \n        IEP         ITL         LUF         NLG         PTE \n   0.787564 1936.270000   40.339900    2.203710  200.482000 \n```\n\n\n:::\n:::\n\n\n\nBefore we jump into using the function though, we will want to discuss some of the syntax that the *grep()* uses. The first is that it expects us to pass a pattern into it using quotation marks. If we type a $\\wedge$ at the beginning of the pattern then it will search for strings **starting with** the pattern. If we type a $ at the end of the pattern then it will search for strings **ending with** the pattern. A single period will stand for any character, and brackets characters in brackets will mean \"any of these characters\". After we specify the pattern we will need to also specify where we are looking for the pattern, and in our case, it will be the names of the euro vector. The output for this function will be the indices of the elements which contain the specified pattern. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(euro)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"ATS\" \"BEF\" \"DEM\" \"ESP\" \"FIM\" \"FRF\" \"IEP\" \"ITL\" \"LUF\" \"NLG\" \"PTE\"\n```\n\n\n:::\n\n```{.r .cell-code}\ngrep(\"E\", names(euro)) # Indices of elements containing an E anywhere\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  3  4  7 11\n```\n\n\n:::\n\n```{.r .cell-code}\neuro[grep(\"E\", names(euro))] # Names containing an E anywhere\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       BEF        DEM        ESP        IEP        PTE \n 40.339900   1.955830 166.386000   0.787564 200.482000 \n```\n\n\n:::\n\n```{.r .cell-code}\ngrep(\"^I\", names(euro)) # Indices of elements starting with I\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 8\n```\n\n\n:::\n\n```{.r .cell-code}\neuro[grep(\"^I\", names(euro))] # Names starting with I\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        IEP         ITL \n   0.787564 1936.270000 \n```\n\n\n:::\n\n```{.r .cell-code}\ngrep(\"F$\", names(euro)) # Indices of elements ending with F\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 6 9\n```\n\n\n:::\n\n```{.r .cell-code}\neuro[grep(\"F$\", names(euro))] # Names ending with F\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     BEF      FRF      LUF \n40.33990  6.55957 40.33990 \n```\n\n\n:::\n\n```{.r .cell-code}\ngrep(\".E.\", names(euro)) # Indices of elements containing _E_\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 7\n```\n\n\n:::\n\n```{.r .cell-code}\neuro[grep(\".E.\", names(euro))] # Names containing with _E_\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      BEF       DEM       IEP \n40.339900  1.955830  0.787564 \n```\n\n\n:::\n\n```{.r .cell-code}\ngrep(\".[EI].\", names(euro)) # Indices of elements containing _E_ or _I_\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 5 7\n```\n\n\n:::\n\n```{.r .cell-code}\neuro[grep(\".[EI].\", names(euro))] # Names containing _E_ or _I_\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      BEF       DEM       FIM       IEP \n40.339900  1.955830  5.945730  0.787564 \n```\n\n\n:::\n:::\n\n\n\nWhile this function may seem a little complicated at first, it is a very powerful tool that will allow us to filter out observations that meet certain criteria. One example might be searching a vector for all observations with the last name \"Smith\" or for people whose first name starts with the letters \"Ca\". \n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/BDRppgPi8-E}{Index Selection using GREP}\n\\end{watch}\n\n## Logical Vectors and Index Selection\n\nWe briefly saw it in the previous lecture, but it is important for us to practice accessing vector elements using logical vectors. If any logical operator ($<,<=, >, >=, ==, !=$) is used to compare vectors, the resulting output will be a logical vector. This will always be the case! It is good practice to think about what the outputted results will be before we even run the code instead of just \"hoping for the best\". \n\nWe can access the vector elements using logical vectors in two ways; explicitly and implicitly. Doing it explicitly would mean we save the logical vector to a new variable and then use the new variable in our index-selection brackets while doing it implicitly would mean we place the logical comparison into the index-selection brackets directly. I prefer the implicit method as we do not have to re-run the code if the original vector changes. Both examples can be seen below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(4,8,2,6,7,6,3,8,6)\ny <- x > 6\n\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nx[y] # Explicit creation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 7 8\n```\n\n\n:::\n\n```{.r .cell-code}\nx[x>6] # Implicit creation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 7 8\n```\n\n\n:::\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 8 2 6 7 6 3 8 6\n```\n\n\n:::\n\n```{.r .cell-code}\nx >= 7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(x >= 7) # Length of the vector is 11 elements\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(x >= 7) # Adding the logical vector: TRUE = 1, FALSE = 0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nx[x >= 7] # Displaying just the values whose index is TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 7 8\n```\n\n\n:::\n:::\n\n\n\nWe can expand our capabilities with logical operators and introduce a few new operators which will allow us to evaluate multiple conditions at the same time. These include & (which represents **and**), $\\vert$ (which represents **or** and is the pipe symbol above the enter key), and ! (which represents **not**). The **and** will require both conditions to be true for the output to be true, the **or** only requires one condition to be true for the output to be true, and the **not** \"flips\" the final output to be the opposite.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:11\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11\n```\n\n\n:::\n\n```{.r .cell-code}\n(x >5) & (x < 10) # Is the element greater than 5 and less than 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nx[(x >5) & (x < 10)] # Displaying the elements that are TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 7 8 9\n```\n\n\n:::\n\n```{.r .cell-code}\n(x < 5) | (x > 9) # Is the elements less than 5 or greater than 9\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nx[(x < 5) | (x > 9)] # Displaying the elements that are TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  2  3  4 10 11\n```\n\n\n:::\n\n```{.r .cell-code}\n!(x > 6) # Is the element not greater than 6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nx[!(x > 6)] # Displaying the elements that are TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n\nIt is important to play around with the logical operators to get comfortable with filtering out elements that meet certain criteria. If you have multiple conditions you may need to use parenthesis to have it do what you wish, as it does the **and** operation before the **or** operation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[(x > 5 | x < 3) & x < 4] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2\n```\n\n\n:::\n\n```{.r .cell-code}\nx[x > 5 | x < 3 & x < 4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  2  6  7  8  9 10 11\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/QIrSEcEYRVk}{Logical Vectors and Index Selection}\n\\end{watch}\n\n## Sample Function\n\nThere are a few special functions in R that we should discuss that will be used throughout the course. The first is the *sample()* function which will allow us to randomly sample values from a vector that we pass into it. We will be able to choose how many values we want to be outputted and whether we want to allow the repetition of the values (this will need to be true if we want to output more values than we passed in). The exact values that are returned are not predictable as they rely on a random number generator behind the scenes. If we wish to get the same values over and over again then we need to use the *set.seed()* function to achieve this goal. An example of using the *sample()* function can be seen below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:10, 5, replace=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  9  5 10  8\n```\n\n\n:::\n\n```{.r .cell-code}\nsample(1:10, 5, replace=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  2 10  9  1\n```\n\n\n:::\n\n```{.r .cell-code}\nsample(1:10, 5, replace=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  9  9  3  8 10\n```\n\n\n:::\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:10, 15, replace=FALSE)\n```\n:::\n\n<span style=\"color: red;font-size: 80%; font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, monospace;\">Error in sample.int(length(x), size, replace, prob) : \n  cannot take a sample larger than the population when &#39;replace = FALSE&#39;</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:10, 15, replace=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  5 10  1  7  6  6  5  6  2  4  1  3  3  3  1\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(123)\nsample(c(\"A\", \"B\", \"C\"), 10, replace=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"C\" \"C\" \"C\" \"B\" \"C\" \"B\" \"B\" \"B\" \"C\" \"A\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsample(c(\"A\", \"B\", \"C\"), 10, replace=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"B\" \"B\" \"A\" \"B\" \"C\" \"A\" \"C\" \"C\" \"A\" \"A\"\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(123) # This will result in the same thing as above\nsample(c(\"A\", \"B\", \"C\"), 10, replace=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"C\" \"C\" \"C\" \"B\" \"C\" \"B\" \"B\" \"B\" \"C\" \"A\"\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/8JwzbwIki-g}{Using the Sample Function}\n\\end{watch}\n\n## Special Functions in R\n\nAnother special function that may come in handy is the *which()* function. What this will do is tell us the index values of the elements which meet certain criteria. Note in the sample below that it is telling us the 1st, 6th, 7th, and 10th elements in the vector are greater than 40 (it is not telling us the values greater than 40, just the indices of the elements):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- sample(1:50, 20, replace=TRUE)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 14 25 26 27  5 27 28  9 29 35  8 26  7 42  9 19 36 14 17 43\n```\n\n\n:::\n\n```{.r .cell-code}\nwhich(x > 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14 20\n```\n\n\n:::\n:::\n\n\n\nOther functions which may be of use to us are the *duplicated()* function and the *unique()* function. The first function, *duplicated()*, will return a logical vector with TRUE after the first occurrence of duplicated values. So, the second time (and additional times) a number appears it will output TRUE. The *unique()* function will return just the unique values of the vector, meaning it will remove all of the duplicated values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 14 25 26 27  5 27 28  9 29 35  8 26  7 42  9 19 36 14 17 43\n```\n\n\n:::\n\n```{.r .cell-code}\nduplicated(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE\n[13] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 14 25 26 27  5 28  9 29 35  8  7 42 19 36 17 43\n```\n\n\n:::\n:::\n\n\n\nTwo other functions that will result in a single logical output are the *any()* and the *all()* function. These will do what their names sound like, that is they will see if any values in the vector meet certain criteria and if all values in the vector meet certain criteria. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 14 25 26 27  5 27 28  9 29 35  8 26  7 42  9 19 36 14 17 43\n```\n\n\n:::\n\n```{.r .cell-code}\nany(x > 45)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nany(x < 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nall(x <= 45)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nall(x < 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/46XJpsU2A6k}{Special Functions in R}\n\\end{watch}\n\n## Getting Help\n\nWhile I have thrown a lot of information at you in this lecture, know that R provides help and resources for all functions. So, if we are ever confused about a specific function or do not know what parameters we can pass into the function, then we can always use a question mark to search for the documentation. That is if we are curious about the *mean()* function then we can type ?mean.\n\nUsing two question marks will search the database for the phrase if we are unsure what the function is called. For instance, we could type ?? \"Standard Deviation\" if we are unsure of the name of the function. Do not worry if you cannot remember everything, as you use it more and more it will become second nature. Even I have to regularly look at the R Documentation to see examples and to see what the options are for each function.\n\n\\begin{watch}{}{}\n    \\href{https://youtu.be/SE8j5P77XUo}{Getting Help in R}\n\\end{watch}",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}